import type { NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import React, { useState } from "react";
import { Layout } from "../components/Layout";
import { trpc } from "../utils/trpc";
import type { SingleError } from "../../lib/types";
import { FiEdit3, FiTrash } from "react-icons/fi";
import { TiTick } from "react-icons/ti";
import { ImCancelCircle } from "react-icons/im";
import Link from "next/link";

const Home: NextPage = () => {
  const [input, setInput] = useState({ title: "", content: "" });
  const [error, setError] = useState({
    title: "",
    content: "",
    both: "Başlık ve içerik minimum 5 karakter olmalıdır.",
  });
  const [edit, setEdit] = useState(false);
  const [selectedPost, setSelectedPost] = useState({
    id: "",
    title: "",
    content: "",
  });

  const handeInputValue = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    setInput({ ...input, [e.target.name]: e.target.value });
  };

  const { data: posts, isLoading: isPostsLoading } =
    trpc.post.getAll.useQuery();
  const post = trpc.post.create.useMutation();
  const deletePost = trpc.post.delete.useMutation();
  const updatePost = trpc.post.update.useMutation();
  const ctx = trpc.useContext();
  const { data: session } = useSession();

  const postDeleteHandler = async (id: string) => {
    await deletePost.mutateAsync(
      { id },
      {
        onSuccess: () => {
          ctx.post.invalidate();
        },
      }
    );
  };

  const postUpdateHandler = async (id: string) => {
    await updatePost.mutateAsync(
      { id, title: selectedPost.title, content: selectedPost.content },
      {
        onSuccess: () => {
          ctx.post.invalidate();
        },
      }
    );
    setEdit(false);
  };

  const handlePost = async (e: React.FormEvent) => {
    e.preventDefault();
    await post.mutateAsync(input, {
      onSuccess: () => {
        ctx.post.invalidate();
        setInput({ title: "", content: "" });
      },
      onError: (err) => {
        const parsedErr = JSON.parse(err.message);
        const findTitle = parsedErr.find(
          (item: SingleError) => item.path[0] === "title"
        );
        const findContent = parsedErr.find(
          (item: SingleError) => item.path[0] === "content"
        );
        if (findTitle) {
          setError({
            ...error,
            title: findTitle.message,
          });
          console.log(findTitle);
        } else {
          setError({
            ...error,
            content: findContent.message,
          });
        }
      },
    });
  };
  return (
    <>
      <Head>
        <title>Guest Book</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        {session && (
          <div className="flex justify-between">
            <form
              className="flex w-[490px] flex-col items-center justify-center gap-4 rounded-md border-4 bg-white px-4 py-2"
              onSubmit={handlePost}
            >
              <div className="flex w-2/3 justify-between gap-2">
                <label htmlFor="title">Başlık</label>
                <input
                  className="w-56 rounded-md border-2 border-slate-900 py-1 px-2"
                  type="text"
                  id="title"
                  maxLength={20}
                  minLength={5}
                  value={input.title}
                  onChange={handeInputValue}
                  name="title"
                />
              </div>
              <div className="flex w-2/3 justify-between gap-2">
                <label htmlFor="content">İçerik</label>
                <textarea
                  className="w-56 rounded-md border-2 border-slate-900 py-1 px-2"
                  id="content"
                  value={input.content}
                  onChange={handeInputValue}
                  name="content"
                  maxLength={100}
                  minLength={5}
                />
              </div>
              <label>
                {error.title && error.content
                  ? error.both
                  : error.title && !error.content
                  ? error.title
                  : error.content}
              </label>
              <button
                className="rounded-md border-[1px] border-gray-900 px-3 py-1"
                type="submit"
              >
                Gönder
              </button>
            </form>
            <div className="w-[490px] border-4 bg-white px-4 py-2"></div>
          </div>
        )}
        <div className="mt-2 w-[1000px] rounded-md border-4 bg-white">
          <ul className="w-full divide-y-2">
            {isPostsLoading ? (
              <p className="text-center">Yükleniyor...</p>
            ) : (
              posts?.map((post) => (
                <li key={post.id} className="flex justify-between">
                  {selectedPost.id === post.id && edit ? (
                    <>
                      <div className="flex gap-4 p-2">
                        <Link href={`/profile/${post.authorId}`}>
                          <a className="max-w-16 flex w-16 flex-col items-center justify-center">
                            <Image
                              className="rounded-full"
                              alt="authorAvatar"
                              src={post.author.image as string}
                              height={36}
                              width={36}
                            />
                            <h3>{post.author.name}</h3>
                          </a>
                        </Link>
                        <div className="flex flex-col">
                          <input
                            className="text-2xl font-bold"
                            type="text"
                            onChange={(e) => {
                              setSelectedPost({
                                ...selectedPost,
                                title: e.target.value,
                              });
                            }}
                            value={selectedPost.title}
                          />
                          <input
                            className="break-all text-lg"
                            type="text"
                            onChange={(e) => {
                              setSelectedPost({
                                ...selectedPost,
                                content: e.target.value,
                              });
                            }}
                            value={selectedPost.content}
                          />
                        </div>
                      </div>
                      <div className="flex flex-col justify-between">
                        {session && (
                          <>
                            <div className="flex">
                              <button
                                onClick={() => {
                                  setEdit(!edit);
                                  setSelectedPost({
                                    id: post.id,
                                    title: post.title,
                                    content: post.content as string,
                                  });
                                  postUpdateHandler(post.id);
                                }}
                                className="flex h-5 w-10 items-center justify-center  rounded-bl-lg bg-green-600 text-white"
                              >
                                <TiTick />
                              </button>
                              <button
                                onClick={() => {
                                  setEdit(!edit);
                                  setSelectedPost({
                                    id: post.id,
                                    title: post.title,
                                    content: post.content as string,
                                  });
                                }}
                                className="flex h-5 w-10 items-center justify-center rounded-tr-sm  bg-red-400 text-white"
                              >
                                <ImCancelCircle />
                              </button>
                            </div>
                            <button
                              onClick={() => {
                                postDeleteHandler(post.id);
                              }}
                              className="flex h-5 w-10 items-center justify-center self-end rounded-br-sm rounded-tl-lg bg-orange-700 text-white"
                            >
                              <FiTrash />
                            </button>
                          </>
                        )}
                      </div>
                    </>
                  ) : (
                    <>
                      <div className="flex gap-4 p-2">
                        <Link href={`/profile/${post.authorId}`}>
                          <a className="max-w-20 flex w-16 flex-col items-center justify-center">
                            <Image
                              className="rounded-full"
                              alt="authorAvatar"
                              src={post.author.image as string}
                              height={36}
                              width={36}
                            />
                            <h3>{post.author.name}</h3>
                          </a>
                        </Link>
                        <div>
                          <h1 className="text-2xl font-bold">{post.title}</h1>
                          <p className="break-all text-lg">{post.content}</p>
                        </div>
                      </div>
                      <div className="flex flex-col justify-between">
                        {session && post.authorId === session.user?.id && (
                          <>
                            <button
                              onClick={() => {
                                setEdit(!edit);
                                setSelectedPost({
                                  id: post.id,
                                  title: post.title,
                                  content: post.content as string,
                                });
                              }}
                              className="flex h-5 w-10 items-center justify-center rounded-tr-sm rounded-bl-lg bg-orange-400 text-white"
                            >
                              <FiEdit3 />
                            </button>
                            <button
                              onClick={() => {
                                postDeleteHandler(post.id);
                              }}
                              className="flex h-5 w-10 items-center justify-center rounded-br-sm rounded-tl-lg bg-orange-700 text-white"
                            >
                              <FiTrash />
                            </button>
                          </>
                        )}
                      </div>
                    </>
                  )}
                </li>
              ))
            )}
          </ul>
        </div>
      </Layout>
    </>
  );
};

export default Home;

// const AuthShowcase: React.FC = () => {
//   const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery();

//   const { data: sessionData } = useSession();

//   return (
//     <div className="flex flex-col items-center justify-center gap-2">
//       {sessionData && (
//         <p className="text-2xl text-blue-500">
//           Logged in as {sessionData?.user?.name}
//         </p>
//       )}
//       {secretMessage && (
//         <p className="text-2xl text-blue-500">{secretMessage}</p>
//       )}
//       <button
//         className="rounded-md border border-black bg-violet-50 px-4 py-2 text-xl shadow-lg hover:bg-violet-100"
//         onClick={sessionData ? () => signOut() : () => signIn()}
//       >
//         {sessionData ? "Sign out" : "Sign in"}
//       </button>
//     </div>
//   );
// };

// type TechnologyCardProps = {
//   name: string;
//   description: string;
//   documentation: string;
// };

// const TechnologyCard = ({
//   name,
//   description,
//   documentation,
// }: TechnologyCardProps) => {
//   return (
//     <section className="flex flex-col justify-center rounded border-2 border-gray-500 p-6 shadow-xl duration-500 motion-safe:hover:scale-105">
//       <h2 className="text-lg text-gray-700">{name}</h2>
//       <p className="text-sm text-gray-600">{description}</p>
//       <a
//         className="m-auto mt-3 w-fit text-sm text-violet-500 underline decoration-dotted underline-offset-2"
//         href={documentation}
//         target="_blank"
//         rel="noreferrer"
//       >
//         Documentation
//       </a>
//     </section>
//   );
// };
